// recommend to specify the flavor once and dynamically adapt paths to it
//def flavor = "develop" // flavor we want to have tested. Should be static
//def Flavor = "Develop" // flavor again, but starting with upper case

// noinspection is used to remove some "warnings" from Android Studio
sonarqube {
    //noinspection GroovyAssignabilityCheck
    androidVariant 'debug'
    properties {
        def libraries = project.android.sdkDirectory.getPath() + "/platforms/android-30/android.jar," +
                "build/intermediates/**/classes.jar"
        property "sonar.host.url", "http://sonarqube.mcruncher.com"
        property "sonar.projectName", "WORSHIPSONGS::ANDROID"
        property "sonar.projectKey", "org.worshipsongs"
        property "sonar.profile", "Android java"
        property "sonar.projectVersion", AppVersion
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.sources", "src/main/java,src/main/res"
        property "sonar.binaries", "build/tmp/kotlin-classes/debug"
        property "sonar.libraries", libraries
        property "sonar.java.binaries", "build/tmp/kotlin-classes/debug"
        property "sonar.java.libraries", libraries
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.android.lint.report", "build/reports/lint-results-debug.xml"
        property "sonar.jacoco.reportPath", "build/jacoco/testDebugUnitTest.exec"
        property "sonar.junit.reportsPath", "build/test-results/testDebugUnitTest"
    }
}

import org.gradle.internal.os.OperatingSystem;
task sonarComplete(type: Exec) {
    workingDir "./"
    def command = "../gradlew"
    if (OperatingSystem.current().isWindows()) {
        command = command + ".bat"
    }
    commandLine command, "clean", "assembleDebug", "lintDebug", "jacocoTestDebugUnitTestReport", "sonarqube"
}

jacoco {
    // https://github.com/jacoco/jacoco/issues/288
    toolVersion = "0.7.9"
}

def coverageSourceDirs = ['../app/src/main/java']
task jacocoAndroidUnitTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"
    classDirectories.setFrom(files(classDirectories.files.collect {
        fileTree(
                dir: '../app/build/tmp/kotlin-classes',
                excludes: ['**/R.class',
                           '**/R$*.class',
                           '**/*$ViewInjector*.*',
                           '**/BuildConfig.*',
                           '**/Manifest*.*', '**/**Test*']
        )
    }))
    additionalSourceDirs.setFrom(files(coverageSourceDirs))
    sourceDirectories.setFrom(files(coverageSourceDirs))
    executionData.setFrom(files('../app/build/jacoco/testDebugUnitTest.exec'))
    reports {
        xml.required = true
        html.required = true
    }
    doFirst {
        files('build/tmp/kotlin-classes/debug').getFiles().each { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}

